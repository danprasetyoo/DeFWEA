generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TreatyDetail {
  id                    Int           @id @default(autoincrement())
  Exchange              Float?
  Margin                Float?
  Brokerage             Float?
  Interest              Float?
  LAP                   Float?
  Maintenance           Float?
  treatyDetailIdCurrent Int?
  treatyDetailIdPrior   Int?
  transactions          Transaction[] @relation("TreatyDetailToTransaction")
  transactionCode       String?
}

model TreatyYear {
  id                    Int           @id @default(autoincrement())
  treatyDetailIdCurrent Int?          @unique
  treatyDetailIdPrior   Int?          @unique
  calculators           Calculator[]  @relation("CalculatorToTreatyDetail")
  transactions          Transaction[] @relation("TreatyYearToTransaction")
}

model LayerDetail {
  id                   Int           @id @default(autoincrement())
  detailUsd            Float?
  detailIdr            Float?
  detailShare          Float?
  layerDetailIdPdma    Int?
  layerDetailIdMa      Int?
  layerDetailIdAv      Int?
  layerDetailIdLiability Int?
  transactions         Transaction[] @relation("LayerDetailToTransaction")
  transactionCode      String?
}

model Layer {
  id                   Int           @id @default(autoincrement())
  layerDetailIdPdma    Int?          @unique
  layerDetailIdMa      Int?          @unique
  layerDetailIdAv      Int?          @unique
  layerDetailIdLiability Int?          @unique
  calculators          Calculator[]  @relation("CalculatorToLayerDetail")
  transactions         Transaction[] @relation("LayerToTransaction")
}

model PremiumDetail {
  id                   Int           @id @default(autoincrement())
  premiumUsd           Float?
  premiumIdr           Float?
  premiumShare         Float?
  premiumIdPdma        Int?
  premiumIdMa          Int?
  premiumIdAv          Int?
  premiumIdLiability   Int?
  transactions         Transaction[] @relation("PremiumDetailToTransaction")
  transactionCode      String?
}

model Premium {
  id                   Int           @id @default(autoincrement())
  premiumIdPdma        Int?          @unique
  premiumIdMa          Int?          @unique
  premiumIdAv          Int?          @unique
  premiumIdLiability   Int?          @unique
  calculators          Calculator[]  @relation("CalculatorToPremium")
  transactions         Transaction[] @relation("PremiumToTransaction")
}

model ShareDetail {
  id              Int           @id @default(autoincrement())
  shareUsd        Float?
  shareIdr        Float?
  sharePremiumUsd Float?
  sharePremiumIdr Float?
  shareIdPdma     Int?
  shareIdMa       Int?
  shareIdAv       Int?
  shareIdLiability Int?
  transactions    Transaction[] @relation("ShareDetailToTransaction")
  transactionCode String?
}

model Share {
  id              Int           @id @default(autoincrement())
  shareIdPdma     Int?          @unique
  shareIdMa       Int?          @unique
  shareIdAv       Int?          @unique
  shareIdLiability Int?          @unique
  calculators     Calculator[]  @relation("CalculatorToShare")
  transactions    Transaction[] @relation("ShareToTransaction")
}

model Calculator {
  id                   Int          @id @default(autoincrement())
  inputStatementDate   String
  inputOpeningfund     String
  inputStatementPeriod String
  inputTreatyYear      Int
  treatyDetailId       Int?
  layerDetailId        Int?
  premiumId            Int?
  shareId              Int?
  version              String       @default("1")
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  transaction          Transaction? @relation("CalculatorToTransaction")
  TreatyYear           TreatyYear?  @relation("CalculatorToTreatyDetail", fields: [treatyDetailId], references: [id])
  Layer                Layer?       @relation("CalculatorToLayerDetail", fields: [layerDetailId], references: [id])
  Premium              Premium?     @relation("CalculatorToPremium", fields: [premiumId], references: [id])
  Share                Share?       @relation("CalculatorToShare", fields: [shareId], references: [id])
}

model Transaction {
  id              Int           @id @default(autoincrement())
  transactionCode String        @unique
  transactionDate DateTime      @default(now())
  amountUSD       Float?
  amountIDR       Float?
  treatyYearId    Int?
  treatyDetailId  Int?
  layerId         Int?
  layerDetailId   Int?
  premiumId       Int?
  premiumDetailId Int?
  shareId         Int?
  shareDetailId   Int?
  version         String        @default("1")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  calculatorId    Int?          @unique
  TreatyDetail    TreatyDetail? @relation("TreatyDetailToTransaction", fields: [treatyDetailId], references: [id])
  TreatyYear      TreatyYear?   @relation("TreatyYearToTransaction", fields: [treatyYearId], references: [id])
  LayerDetail     LayerDetail?  @relation("LayerDetailToTransaction", fields: [layerDetailId], references: [id])
  Layer           Layer?        @relation("LayerToTransaction", fields: [layerId], references: [id])
  PremiumDetail   PremiumDetail? @relation("PremiumDetailToTransaction", fields: [premiumDetailId], references: [id])
  Premium         Premium?      @relation("PremiumToTransaction", fields: [premiumId], references: [id])
  ShareDetail     ShareDetail?  @relation("ShareDetailToTransaction", fields: [shareDetailId], references: [id])
  Share           Share?        @relation("ShareToTransaction", fields: [shareId], references: [id])
  Calculator      Calculator?   @relation("CalculatorToTransaction", fields: [calculatorId], references: [id])
}